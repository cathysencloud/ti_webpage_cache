/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package com.sencloud.webpagecache;

import java.io.File;
import java.io.IOException;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.KrollObject;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;
import org.appcelerator.titanium.TiApplication;

import com.jaunt.JauntException;
import com.jaunt.UserAgent;

@Kroll.module(name = "Webpagecache", id = "com.sencloud.webpagecache")
public class WebpagecacheModule extends KrollModule {

	// Standard Debugging variables
	private static final String TAG = "WebpagecacheModule";
	private static final boolean DBG = TiConfig.LOGD;

	private static WebpagecacheModule _instance;

	private File file;

	// You can define constants with @Kroll.constanTAGt, for example:
	// @Kroll.constant public static final String EXTERNAL_NAME = value;

	public WebpagecacheModule() {
		super();
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app) {
		Log.d(TAG, "inside onAppCreate");
		// put module init code that needs to run when the application is
		// created
	}

	public static WebpagecacheModule getInstance() {
		return _instance;
	}

	/**
	 * 下载并解析HTML文件
	 */
	@Kroll.method
	public void cacheWebpage(KrollDict options) {

		// Log.e(TAG, options.toString());

		KrollFunction successCallback = getCallback(options, "success");
		KrollFunction errorCallback = getCallback(options, "failed");
		// 根据key调用getParameter函数得到参数中对应的value
		String url = (String) getParameter(options, "url");
		String cacheDir = (String) getParameter(options, "cacheDir");
		// String cid = (String) getParameter(options, "cid");

		try {
			// 使用第三方框架junt实现网页HTML源码的下载和解析
			UserAgent ua = new UserAgent();
			// 根据URL访问网页
			ua.visit(url);
			// 将网页的HTML代码保存在指定的地址
			file = new File(cacheDir + "/index.html");
			ua.doc.saveCompleteWebPage(file);

			// final KrollDict dict = new KrollDict();
			// dict.put("cid", cid);
			// dict.put("cacheName", file.getAbsolutePath());
			successCallback.callAsync((KrollObject) successCallback,
					dictReturn(options));
		} catch (JauntException e) {
			// TODO Auto-generated catch block
			errorCallback.callAsync((KrollObject) errorCallback,
					dictReturn(options));
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			errorCallback.callAsync((KrollObject) errorCallback,
					dictReturn(options));
			e.printStackTrace();
		}
	}

	/*
	 * 下载完成后，把cid和文件路径返回
	 */
	private KrollDict dictReturn(KrollDict options) {

		String cid = (String) getParameter(options, "cid");
		final KrollDict dict = new KrollDict();
		dict.put("cid", cid);
		dict.put("cacheName", file.getAbsolutePath());
		return dict;
	}

	/*
	 * 从参数中获取某个key对应的callback
	 */
	private KrollFunction getCallback(final KrollDict options, final String name) {
		if (options.containsKey(name)) {
			return (KrollFunction) options.get(name);
		} else {
			return null;
		}
	}

	/*
	 * 从参数中获取某个key对应的value
	 */
	private Object getParameter(final KrollDict options, final String name) {
		if (options.containsKey(name)) {
			return (Object) options.get(name);
		} else {
			return null;
		}
	}
}
